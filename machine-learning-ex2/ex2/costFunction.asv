function [J, grad] = costFunction(theta, X, y)
%COSTFUNCTION Compute cost and gradient for logistic regression
%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the
%   parameter for logistic regression and the gradient of the cost
%   w.r.t. to the parameters.

% Initialize some useful values
m = length(y); % number of training examples

% You need to return the following variables correctly 
J = 0;
grad = zeros(size(theta));
theta_len = length(theta);

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the cost of a particular choice of theta.
%               You should set J to the cost.
%               Compute the partial derivatives and set grad to the partial
%               derivatives of the cost w.r.t. each parameter in theta
%
% Note: grad should have the same dimensions as theta
%

for i = 1 : m
   
  s = sigmoid((X(i, :) * theta));
  l_s = log(single(s));
  l_s1 = log(single(1 - s));
  J = J - (y(i) * l_s) - ((1 - y(i)) * l_s1);
  
end;

J = J / m;

%{
s = sigmoid((X * theta) .* -1);
J = J - (y' * log(s)) - ((ones(size(y)) - y)' * log(ones(size(s)) - s));

J = sum(J) / m;
%}
for j_1 = 1 : theta_len
    
  grad_j = (sigmoid((X * theta) .* -1) - y)' * X(:, j_1);

  grad(j_1) = sum(grad_j) / m;
  %{
  for i_1 = 1 : m
    %s = sigmoid(-1 * (X(i, :) * theta));
    %grad(j) = grad(j) + ((-1 * y(i) * log(s)) - ((1 - y(i)) * log(1 - s))) * X(i, j);
    grad(j_1) = grad(j_1) + ((sigmoid((X(i_1, :) * theta) .* -1) - y(i_1)) * X(i_1, j_1));
  end;
  grad(j_1) = grad(j_1) / m;
  %}
end;


% =============================================================

end
